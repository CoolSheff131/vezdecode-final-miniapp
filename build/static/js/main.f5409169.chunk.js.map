{"version":3,"sources":["panels/Home.js","App.js","index.js"],"names":["Home","id","fetchedUser","go","React","useState","authographText","setAutographText","authographs","setAutographs","file","setFile","previewFileUrl","setPreviewFileUrl","isCanvas","setIsCanvas","isCanvasActive","setIsCanvasActive","useEffect","reader","FileReader","onload","e","target","result","readAsDataURL","handleSetFileFromBase64","data","fetch","base64","blob","top","type","value","onChange","disabled","onClick","width","height","color","active","thickness","useEraser","image","onSave","className","event","files","src","authograph","text","author","imageUrl","map","index","first_name","last_name","bridge","send","background_type","url","stickers","sticker_type","sticker","action_type","action","shareInHistoryHandle","App","scheme","setScheme","activePanel","setActivePanel","setUser","size","popout","setPopout","user","subscribe","detail","fetchData","currentTarget","dataset","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5409169.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport bridge from '@vkontakte/vk-bridge';\nimport { Panel, Button, Group, Div, Input, FormItem } from '@vkontakte/vkui';\nimport { Paintable } from 'paintablejs/react';\nimport './styles.css';\n\nconst Home = ({ id, go, fetchedUser }) => {\n  const [authographText, setAutographText] = React.useState('');\n  const [authographs, setAutographs] = React.useState([]);\n  const [file, setFile] = React.useState(null);\n  const [previewFileUrl, setPreviewFileUrl] = React.useState(null);\n  const [isCanvas, setIsCanvas] = React.useState(null);\n  const [isCanvasActive, setIsCanvasActive] = React.useState(true);\n\n  React.useEffect(() => {\n    if (file === null) {\n      return setPreviewFileUrl(null);\n    }\n    var reader = new FileReader();\n    reader.onload = (e) => {\n      setPreviewFileUrl(e.target.result);\n    };\n\n    reader.readAsDataURL(file);\n  }, [file]);\n\n  const handleSetFileFromBase64 = async (data) => {\n    if (typeof data === 'string') {\n      const base64 = await fetch(data);\n\n      data = await base64.blob();\n    }\n    setFile(data);\n  };\n\n  const addAutographHandle = () => {\n    const authograph = {\n      text: authographText,\n      author: fetchedUser,\n      file,\n      imageUrl: previewFileUrl,\n    };\n    setAutographs([...authographs, authograph]);\n    setAutographText('');\n    setFile(null);\n  };\n\n  const onFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const shareInHistoryHandle = (authograph) => {\n    bridge.send('VKWebAppShowStoryBox', {\n      background_type: 'image',\n      url: authograph.imageUrl,\n      stickers: [\n        {\n          sticker_type: 'native',\n          sticker: {\n            action_type: 'text',\n            action: {\n              text: `${authograph.author.first_name} ${authograph.author.last_name} ${authograph.text}`,\n            },\n          },\n        },\n      ],\n    });\n  };\n\n  return (\n    <Panel id={id}>\n      <Group>\n        <Div>\n          <Div>\n            <FormItem top=\"Текст автографа\">\n              <Input\n                type=\"text\"\n                value={authographText}\n                onChange={(e) => {\n                  setAutographText(e.target.value);\n                }}\n                disabled={false}\n              />\n            </FormItem>\n            {!(isCanvas && isCanvasActive) && (\n              <Button onClick={() => setIsCanvas(!isCanvas)}>\n                {isCanvas ? 'Хочу загрузить изображение' : 'Хочу нарисовать автограф'}\n              </Button>\n            )}\n            {isCanvas ? (\n              <Paintable\n                width={1024}\n                height={768}\n                color={'#fff'}\n                active={isCanvasActive}\n                thickness={5}\n                useEraser={false}\n                image={previewFileUrl}\n                onSave={(image) => handleSetFileFromBase64(image)}>\n                <div className={'canvas-inner'}></div>\n              </Paintable>\n            ) : (\n              <>\n                <input type=\"file\" onChange={onFileChange} />\n                {previewFileUrl && <img src={previewFileUrl}></img>}\n              </>\n            )}\n            {isCanvas && (\n              <Button onClick={() => setIsCanvasActive(!isCanvasActive)}>\n                {isCanvasActive\n                  ? 'Сохранить нарисованный автограф'\n                  : 'Редактировать нарисованный автограф'}\n              </Button>\n            )}\n            {!(isCanvas && isCanvasActive) && (\n              <Button onClick={addAutographHandle}>Сохранить комментарии</Button>\n            )}\n          </Div>\n\n          <Div>\n            {authographs.map((authograph, index) => (\n              <Div key={index}>\n                {authograph.author && (\n                  <Div>\n                    {authograph.author.first_name} {authograph.author.last_name}\n                  </Div>\n                )}\n                <div>{authograph.text}</div>\n                {authograph.imageUrl && <img src={authograph.imageUrl}></img>}\n                <Button onClick={() => shareInHistoryHandle(authograph)}>\n                  Поделиться в истории\n                </Button>\n              </Div>\n            ))}\n          </Div>\n        </Div>\n      </Group>\n    </Panel>\n  );\n};\n\nHome.propTypes = {\n  id: PropTypes.string.isRequired,\n  go: PropTypes.func.isRequired,\n  fetchedUser: PropTypes.shape({\n    photo_200: PropTypes.string,\n    first_name: PropTypes.string,\n    last_name: PropTypes.string,\n    city: PropTypes.shape({\n      title: PropTypes.string,\n    }),\n  }),\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n  View,\n  ScreenSpinner,\n  AdaptivityProvider,\n  AppRoot,\n  ConfigProvider,\n  SplitLayout,\n  SplitCol,\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\n\nconst App = () => {\n  const [scheme, setScheme] = useState('bright_light');\n  const [activePanel, setActivePanel] = useState('home');\n  const [fetchedUser, setUser] = useState(null);\n  const [popout, setPopout] = useState(<ScreenSpinner size=\"large\" />);\n\n  useEffect(() => {\n    bridge.subscribe(({ detail: { type, data } }) => {\n      if (type === 'VKWebAppUpdateConfig') {\n        setScheme(data.scheme);\n      }\n    });\n\n    async function fetchData() {\n      const user = await bridge.send('VKWebAppGetUserInfo');\n      setUser(user);\n      setPopout(null);\n    }\n    fetchData();\n  }, []);\n\n  const go = (e) => {\n    setActivePanel(e.currentTarget.dataset.to);\n  };\n\n  return (\n    <ConfigProvider scheme={scheme}>\n      <AdaptivityProvider>\n        <AppRoot>\n          <SplitLayout popout={popout}>\n            <SplitCol>\n              <View activePanel={activePanel}>\n                <Home id=\"home\" fetchedUser={fetchedUser} go={go} />\n              </View>\n            </SplitCol>\n          </SplitLayout>\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}